// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  // provider = "prisma-client-js"
  // We ll be using prisma for migrations but not as an ORM
  // so we ll generate kysely types instead of prismaClient's
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../generated/db"
  fileName     = "types.generated.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
  intTypeOverride = "string | number"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  content   String?
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?
  posts    Post[]
  profile  Profile?
  teams    TeamUser[]
  boards   Board[]
}

model Team {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  name      String     @unique
  users  TeamUser[]
  boards   Board[]
}

model TeamUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  team   Team @relation(fields: [teamId], references: [id])
  teamId Int
  createdAt DateTime   @default(now())
  @@id([teamId, userId])
}

model Board {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  title      String     
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  team Team @relation(fields: [teamId], references: [id])
  teamId Int
  imageUrl String
}